/* src/App.css */

/* General Body and App Container */
body {
  margin: 0; /* Ensure margin is reset */
  display: flex;
  flex-direction: column;
  /* justify-content: flex-start; /* Good for content starting at the top */
  align-items: center; /* This will center #root horizontally if #root doesn't have width 100% */
  min-height: 100vh;
  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  font-family: 'Helvetica Neue', Arial, sans-serif;
  padding: 20px 0; /* Your app padding */
  box-sizing: border-box;
  overflow-x: hidden;
}

#root { /* Ensure #root takes full width if body is aligning it center */
    width: 100%;
    display: flex; /* If you want App.jsx to be centered within root */
    flex-direction: column;
    align-items: center;
    flex-grow: 1;
}

.app-container {
  display: flex;
  flex-grow: 1;
  flex-direction: column;
  align-items: center; /* This centers content *within* app-container */
  width: 98%; /* Takes full width of its parent (#root) */
  max-width: 1200px; /* Overall app constraint */
  gap: 15px;
  position: relative;  
}

/* Top Bar Styling */
#top-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  max-width: 90vw; /* Make top-bar responsive with game-area */
  /* max-width: 600px; /* Or a fixed max if preferred */
  padding: 0 10px; /* Add some padding if it's full width */
  margin-bottom: 15px;
  box-sizing: border-box;
}

#top-bar-controls {
  display: flex;
  gap: 10px;
  flex-grow: 1;
}

#top-bar .glossy-button {
  padding: 10px 15px;
  font-size: 0.9em;
  flex-grow: 1;
  min-width: 0;
  text-align: center;
}

.timer-display {
  font-size: 0.9em;
  font-weight: 400;
  color: #333;
  padding: 10px 15px;
  background-color: rgba(255, 255, 255, 0.9);
  border-radius: 20px;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08);
  margin-left: 10px;
  white-space: nowrap;
  flex-shrink: 0;
}

/* Game Area */
#game-area {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
  background-color: rgba(255, 255, 255, 0.75);
  padding: 20px;
  border-radius: 15px;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  width: 100%; /* Takes width from app-container */
  /* max-width: 90vw; /* Keep this as an overall constraint for the game area */
  max-width: 1024px; /* OR a more generous fixed max-width for desktop */
  box-sizing: border-box; 
  flex-grow: 1;
  min-height: 0; 
}

#play-area-wrapper {
  display: flex;
  justify-content: center; /* Center its content (sidebars + canvas-main) */
  align-items: stretch;   /* Make sidebars and canvas-main stretch to tallest */
  gap: 10px;
  width: 100%; /* Fill #game-area */
  flex-grow: 1;
  min-height: 0;
}

.sidebar {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-items: center;
  width: 50px;
  padding: 10px 0;
  box-sizing: border-box;
  flex-shrink: 0;
}

.sidebar-button {
  width: 44px;
  height: 44px;
  border-radius: 50%;
  padding: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 13px;
  font-weight: 600;
  color: #444;
  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.6);
  cursor: pointer;
  background: linear-gradient(to bottom, #ffffff 0%, #f3f3f3 100%);
  border: 1px solid #cccccc;
  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.08),
    inset 0 1px 1px rgba(255, 255, 255, 0.8),
    inset 0 -1px 1px rgba(0, 0, 0, 0.03);
  transition: all 0.2s ease-out;
  outline: none;
}
.sidebar-button:hover {
  background: linear-gradient(to bottom, #ffffff 0%, #e9e9e9 100%);
  border-color: #bbbbbb;
  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1),
    inset 0 1px 1px rgba(255, 255, 255, 0.8),
    inset 0 -1px 1px rgba(0, 0, 0, 0.03);
}
.sidebar-button:active {
  background: linear-gradient(to top, #ffffff 0%, #e9e9e9 100%);
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.15),
    0 1px 0 rgba(255,255,255,0.7);
  transform: translateY(1px);
  color: #333;
}
.sidebar-button.active {
  background: linear-gradient(to bottom, #a0ddff 0%, #6cace0 100%);
  border-color: #5a99cf;  color: #002244;
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2), 0 1px 0 rgba(255,255,255,0.6);
  font-weight: 700;
}
.sidebar-button.active:hover {
  background: linear-gradient(to bottom, #90cff0 0%, #5c9bd1 100%);
}
.sidebar-button:disabled,
.sidebar-button.disabled {
  opacity: 0.5; cursor: not-allowed;
  background: linear-gradient(to bottom, #e0e0e0 0%, #d0d0d0 100%) !important;
  border-color: #c0c0c0 !important; color: #888 !important;
  box-shadow: inset 0 1px 2px rgba(0,0,0,0.1) !important;
  transform: none !important;
}

#canvas-container-main {
  flex-grow: 1; /* IMPORTANT: This will take up remaining space in #play-area-wrapper */
  min-width: 0; /* Allow it to shrink if necessary, preventing overflow */
  display: flex;
  justify-content: center; /* Center #canvas-container within it */
  align-items: center;   /* Center #canvas-container within it */ 
}

#canvas-container {
  position: relative;
  /* Width will be determined by the content (.sudoku-grid) up to a max-width */
  width: 100%; /* Try to fill #canvas-container-main */
  max-width: 800px;  /* Max physical size of the grid */
  /* height will be driven by .sudoku-grid's aspect-ratio */
  display: flex; /* Not strictly necessary if .sudoku-grid is block and centered by text-align on parent or margin auto */
  justify-content: center;
  align-items: center; 
}

.sudoku-grid {
  display: grid;
  width: 100%; /* Fill #canvas-container */
  aspect-ratio: 1 / 1;
  /* max-width: 100%; /* Ensures it doesn't overflow #canvas-container if #canvas-container has a width */
  border: 2px solid #333;
  background-color: #fff;
  user-select: none;
  box-sizing: border-box;
}


/* Font sizes for grid cells based on grid size class */
.sudoku-grid.grid-size-4 .cell .value,
.sudoku-grid.grid-size-4 .flipping-cell-face .value,
.sudoku-grid.grid-size-4 .morphing-cell .value {
  font-size: clamp(1.5rem, 8vmin, 3.5rem); /* Responsive font size */
}
.sudoku-grid.grid-size-9 .cell .value,
.sudoku-grid.grid-size-9 .flipping-cell-face .value,
.sudoku-grid.grid-size-9 .morphing-cell .value {
  font-size: clamp(1rem, 5vmin, 2.5rem);
}
.sudoku-grid.grid-size-16 .cell .value,
.sudoku-grid.grid-size-16 .flipping-cell-face .value,
.sudoku-grid.grid-size-16 .morphing-cell .value {
  font-size: clamp(0.6rem, 3.5vmin, 1.5rem);
}
/* Common style for all cell values */
.sudoku-grid .cell .value,
.sudoku-grid .flipping-cell-face .value,
.sudoku-grid .morphing-cell .value {
  line-height: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
}


/* Main Content Wrapper for Blur Effect */
#main-content-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 20px;
  width: 100%;
  transition: filter 0.3s ease-in-out;
}
#main-content-wrapper.blurred {
  filter: blur(5px);
  pointer-events: none;
}

/* Message Area */
#message-area {
  width: 100%;
  text-align: center;
  min-height: 30px;
  font-size: clamp(1rem, 3vw, 1.5rem); /* Responsive font size */
  font-weight: bold;
  transition: all 0.3s ease;
  transform: translateZ(0);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: relative;
  z-index: 10;
  margin-top: 10px;
}
#message-area.won { color: #28a745; text-shadow: 0 0 2px rgba(40, 167, 69, 0.5); }
#message-area.failed { color: #dc3545; text-shadow: 0px 0px 2px rgba(220, 53, 69, 0.5); }
#message-area.playing { color: transparent; }

/* Glossy Styles */
.glossy-button, .glossy-select {
  padding: 10px 18px; border: 1px solid rgba(0, 0, 0, 0.15);
  border-radius: 20px; font-size: 14px; font-weight: 500;
  color: #333; cursor: pointer;
  background: linear-gradient(to bottom, #ffffff 0%, #f1f1f1 100%);
  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.05), inset 0 1px 0 rgba(255, 255, 255, 0.5);
  transition: all 0.2s ease-out; outline: none;
}
.glossy-button:hover, .glossy-select:hover {
  background: linear-gradient(to bottom, #f9f9f9 0%, #e9e9e9 100%);
  box-shadow: 0 3px 5px rgba(0, 0, 0, 0.08), inset 0 1px 0 rgba(255, 255, 255, 0.5);
  transform: translateY(-1px);
}
.glossy-button:active {
  background: linear-gradient(to bottom, #e9e9e9 0%, #f1f1f1 100%);
  box-shadow: inset 0 2px 3px rgba(0, 0, 0, 0.1);
  transform: translateY(1px);
}
.glossy-button:disabled {
  opacity: 0.6; cursor: not-allowed; background: #e0e0e0;
  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05); transform: none;
}
.glossy-select {
  padding-right: 30px; -webkit-appearance: none; -moz-appearance: none;
  appearance: none;
  background-image: url('data:image/svg+xml;charset=US-ASCII,<svg width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M1.41 0.589996L6 5.17L10.59 0.589996L12 2L6 8L0 2L1.41 0.589996Z" fill="%23555"/></svg>');
  background-repeat: no-repeat; background-position: right 12px center;
}

/* Cell Base and Specific Styles */
.cell { /* For StandardCell and base for MorphingCell */
  display: flex; flex-direction: column; justify-content: center; align-items: center;
  cursor: pointer; border: 1px solid #ddd; box-sizing: border-box;
  transition: background-color 0.1s ease-in-out; position: relative;
  opacity:0.6;
}
.cell.standard-cell { /* Specific to StandardCell if needed */ }
.morphing-cell { /* Specific to MorphingCell if needed */ }

.cell.subgrid-border-right, .morphing-cell.subgrid-border-right,
.flipping-cell-face.subgrid-border-right-face { border-right: 2px solid #555 !important; }
.cell.subgrid-border-bottom, .morphing-cell.subgrid-border-bottom,
.flipping-cell-face.subgrid-border-bottom-face { border-bottom: 2px solid #555 !important; }

.cell.clue, .morphing-cell.clue, .flipping-cell-face.clue-face {
  font-weight: bold; color: #333; background-color: #f0f0f0; cursor: default;
}
.cell.user-filled .value, .morphing-cell.user-filled .value,
.flipping-cell-face .user-filled-text { color: #007bff; font-weight: bold;}

.cell .value.incorrect, .morphing-cell .value.incorrect,
.flipping-cell-face .value.incorrect { color: #dc3545 !important; text-decoration: line-through; }

.cell .value.hint, .morphing-cell .value.hint,
.flipping-cell-face .value.hint { color: #28a745 !important; opacity: 1; font-weight: bold; }

.small-hint { /* Applies to all cell types */
  font-size: 0.6em; /* Smaller relative to dynamic cell font */
  font-weight: bold; color: #28a745; position: absolute;
  top: 2px; right: 3px; line-height: 1;
}

.cell.selected, .morphing-cell.selected,
.flipping-cell-face.selected-face {
  outline: 2px solid #007bff; outline-offset: -2px; z-index: 10;
}
.cell.selected:not(.clue), .morphing-cell.selected:not(.clue),
.flipping-cell-face.selected-face:not(.clue-face) {
    /* ensure selection only on non-clues if that's intended for outline */
}


.cell.highlight-row, .morphing-cell.highlight-row, .flipping-cell-outer-wrapper.highlight-row .flipping-cell-face:not(.hovered-face),
.cell.highlight-col, .morphing-cell.highlight-col, .flipping-cell-outer-wrapper.highlight-col .flipping-cell-face:not(.hovered-face),
.cell.highlight-subgrid, .morphing-cell.highlight-subgrid, .flipping-cell-outer-wrapper.highlight-subgrid .flipping-cell-face:not(.hovered-face) {
  background-color: rgba(151, 192, 255, 0.2); /* More subtle highlight */
  opacity:1;

}
.cell.hovered-cell, .morphing-cell.hovered-cell,
.flipping-cell-outer-wrapper.hovered-cell .flipping-cell-face {
  background-color: rgba(104, 195, 255, 0.35); /* More subtle hover */
  z-index: 5;
  opacity:1;
}

/* Hint Indicator */
.hinted-cell-indicator {
  /* Option 1: Make the glow stronger and add an inner component */
  box-shadow:
    inset 0 0 3px 1px rgba(121, 210, 125, 0.9), /* Inner subtle highlight */
    0 0 12px 4px rgba(76, 175, 80, 0.8) !important; /* Outer stronger glow */
  
  /* Option 2: A pseudo-border effect using box-shadow */
  /* box-shadow: 0 0 0 2px #4CAF50 !important; /* This creates a 2px solid green "border" */
  
  z-index: 15 !important;
  /* background-color: rgba(76, 175, 80, 0.1) !important; /* Optional: subtle background tint */
}
.flipping-cell-face.hinted-cell-indicator-face { /* Specific for flipping face if needed */
  box-shadow: inset 0 0 8px 2px rgba(76, 175, 80, 0.6) !important;
}


/* Lock Icon */
.lock-icon-container {
  position: absolute; top: 1px; right: 1px;
  width: 12px; height: 12px; display: flex; justify-content: center; align-items: center;
  cursor: pointer; font-size: 10px; z-index: 2; user-select: none;
  transition: opacity 0.2s ease-in-out;
}
.lock-icon-container.is-inactive-lock { opacity: 0.3; }
.lock-icon-container.is-inactive-lock:hover { opacity: 0.7; }
.lock-icon-container.is-active-lock { opacity: 1; }
.cell.locked, .morphing-cell.locked, .flipping-cell-face.locked-face {
  box-shadow: inset 0 0 0 2px #0056b3;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
  body { padding: 10px 0; }
  .app-container { gap: 10px; }
  #game-area { padding: 15px; max-width: 95vw; }
  #top-bar { max-width: 95vw; padding: 0 5px;}

  #play-area-wrapper {
    flex-direction: column; align-items: center; gap: 15px;
  }
  .sidebar {
    flex-direction: row; width: auto; max-width: 90%; height: auto;
    justify-content: center; gap: 10px; padding: 5px 0;
  }
  #canvas-container-main { width: 90vw; /* max-width still applies from #canvas-container */ }
  #canvas-container { max-width: 450px; /* Keep a reasonable max even on tablets */ }
}

@media (max-width: 480px) {
  #top-bar .glossy-button { font-size: 0.8em; padding: 8px 10px; }
  .timer-display { font-size: 0.9em; padding: 8px 10px; border-radius: 15px; }
  #game-area { padding: 10px; max-width: 100vw; }
  #play-area-wrapper { gap: 10px; }
  .sidebar { max-width: 95%; gap: 5px; }
  .sidebar-button { width: 40px; height: 40px; font-size: 12px; }
  #canvas-container-main { width: 95vw; }
  #canvas-container { max-width: 100%; } /* Allow grid to use almost full width */
  #message-area { font-size: clamp(0.9rem, 2.5vw, 1.2rem); min-height: 24px; }
  .glossy-button, .glossy-select { font-size: 13px; padding: 8px 14px; }
  .small-hint { font-size: 0.5em; top:1px; right: 1px;}
  .lock-icon-container { font-size: 9px; width: 14px; height: 14px; top:1px; right:1px;}

  .sudoku-grid.grid-size-4 .cell .value,
  .sudoku-grid.grid-size-4 .flipping-cell-face .value,
  .sudoku-grid.grid-size-4 .morphing-cell .value { font-size: clamp(1.2rem, 7vmin, 3rem); }
  .sudoku-grid.grid-size-9 .cell .value,
  .sudoku-grid.grid-size-9 .flipping-cell-face .value,
  .sudoku-grid.grid-size-9 .morphing-cell .value { font-size: clamp(0.9rem, 4.5vmin, 2rem); }
  .sudoku-grid.grid-size-16 .cell .value,
  .sudoku-grid.grid-size-16 .flipping-cell-face .value,
  .sudoku-grid.grid-size-16 .morphing-cell .value { font-size: clamp(0.5rem, 3vmin, 1.2rem); }
}

/*debug coloring

.app-container {background-color: lightcyan;}
#game-area { background-color: lightblue; }
#play-area-wrapper { background-color: lightcoral; }
.sidebar {background-color: #d2d3fa; }
#canvas-container-main { background-color: lightgoldenrodyellow; }
#canvas-container { background-color: lightgreen; }
*/

.cell .corner-note-box {
  position: absolute;
  top: 1px;
  left: 1px;
  /* Responsive base size for the box itself */
  width: clamp(14px, 3.5vmin, 22px); /* Slightly larger base */
  height: clamp(14px, 3.5vmin, 22px);
  
  /* Default background: visible when no value, indicating clickability */
  background-color: rgba(200, 200, 255, 0.25); /* Reduced opacity for default */
  border: 1px solid rgba(150, 150, 200, 0.35); /* Reduced opacity for default */
  
  border-radius: 3px; /* Slightly more rounded */
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  
  /* Base font size for the corner note value - will be overridden if it has value */
  /* This will be a fallback if the .corner-note-value span isn't rendered or for some reason. */
  font-size: clamp(0.5rem, 2vmin, 0.9rem); 
  color: #445; /* Darker color for better visibility on light background */
  z-index: 1;
  transition: background-color 0.2s, border-color 0.2s, opacity 0.2s;
  opacity: 0.6; /* Default opacity, increases on hover or if it has value */
}

.cell .corner-note-box:hover {
  background-color: rgba(180, 180, 230, 0.45);
  border-color: rgba(100, 100, 150, 0.5);
  opacity: 1;
}

/* When the corner note box HAS a value */
.cell .corner-note-box.has-value {
  background-color: rgba(0, 0, 0, 0.05); /* Almost transparent background */
  border-color: rgba(0, 0, 0, 0.1);     /* Very subtle border, or even 'transparent' */
  opacity: 1; /* Full opacity for the text */
}

.cell .corner-note-box.has-value:hover {
  background-color: rgba(0, 0, 0, 0.1);  /* Slightly more visible on hover */
  border-color: rgba(0, 0, 0, 0.2);
}

.cell .corner-note-box .corner-note-value {
  font-weight: bold;
  line-height: 1;
  display: block; /* Ensure it takes up space if needed */
  
  /* --- FONT SIZE ADJUSTMENT --- */
  /* This is the tricky part: making it 80% of the PARENT CELL's value font size.
     CSS doesn't have a direct way to say "80% of parent's .value span's font-size".
     We can use `em` units relative to the .corner-note-box's font-size,
     or try to set a base font-size on .corner-note-box that is itself relative
     to the main cell, and then make .corner-note-value slightly larger within that.

     Option 1: Relative to .corner-note-box's font-size (simpler CSS)
     If .corner-note-box font-size is clamp(0.5rem, 2vmin, 0.9rem),
     then 1.2em here would make it slightly larger than that.
     This won't be exactly 80% of the main cell's value.
  */
  /* font-size: 1.2em; */ /* Example: 120% of the .corner-note-box's base font size */

  /*
     Option 2: A more direct attempt using CSS variables if you set them on the main cell.
     This would require MorphingCell.jsx to set a CSS variable based on its main value's font size.
     Example in MorphingCell.jsx's style: style={{ ...cellStyle, '--main-font-size': cellStyle.fontSize }}
     Then in CSS: font-size: calc(var(--main-font-size) * 0.8);
     This is more complex to implement across cell types.

     Option 3: Use a fixed-ish responsive size that *approximates* 80%.
     The main cell value font sizes in App.css are like:
     grid-size-9: clamp(1rem, 5vmin, 2.5rem);  (16px to 40px for 1rem root)
     80% of this is roughly: clamp(0.8rem, 4vmin, 2rem);

     grid-size-16: clamp(0.6rem, 3.5vmin, 1.5rem); (9.6px to 24px)
     80% of this is roughly: clamp(0.48rem, 2.8vmin, 1.2rem);

     Let's try a new clamp for .corner-note-value that aims for this 80% feel.
  */
  font-size: clamp(0.6rem, 2.8vmin, 1.2rem); /* Adjust min, preferred, max based on main cell values */
  color: #005aba; /* Ensure good contrast for the number itself */
}


/* Adjust lock icon z-index if it needs to be above corner note box */
.lock-icon-container {
  /* ... existing styles ... */
  z-index: 2; /* Ensure lock is above corner note */
}